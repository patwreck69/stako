// staking_contract_deployment.rs
// Handles contract initialization and deployment for Stako staking pools

use anchor_lang::prelude::*;
use anchor_spl::token::{Token, TokenAccount, Mint};

#[program]
pub mod staking_contract_deployment {
    use super::*;

    pub fn initialize_contract(ctx: Context<InitializeContract>, apy: u64, lockup_period: u64) -> Result<()> {
        let staking_contract = &mut ctx.accounts.staking_contract;
        staking_contract.admin = ctx.accounts.admin.key();
        staking_contract.token_mint = ctx.accounts.token_mint.key();
        staking_contract.apy = apy;
        staking_contract.lockup_period = lockup_period;
        staking_contract.total_staked = 0;
        staking_contract.reward_balance = 0;
        msg!("Staking contract deployed with APY: {}% and Lockup: {} days", apy, lockup_period);
        Ok(())
    }
}

#[derive(Accounts)]
pub struct InitializeContract<'info> {
    #[account(init, payer = admin, space = 8 + 64)]
    pub staking_contract: Account<'info, StakingContract>,
    pub token_mint: Account<'info, Mint>,
    #[account(mut)]
    pub admin: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[account]
pub struct StakingContract {
    pub admin: Pubkey,
    pub token_mint: Pubkey,
    pub apy: u64,
    pub lockup_period: u64,
    pub total_staked: u64,
    pub reward_balance: u64,
}
